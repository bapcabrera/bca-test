parameters:
- name: testWindows
  displayName: Test on Windows
  type: boolean
  default: true
- name: testLinux
  displayName: Test on Linux
  type: boolean
  default: true
- name: testMacOs
  displayName: Test on MacOS
  type: boolean
  default: true

variables:
- name: poolName
  value: 'Azure Pipelines'
- name: vmImageWindows
  value: 'windows-latest'
- name: vmImageLinux
  value: 'ubuntu-latest'
- name: vmImageMacOS
  value: 'macOS-latest'

jobs:
- job: Test
  displayName: Test on
  strategy:
    matrix:
      Windows:
        poolName: ${{ variables.poolName }}
        vmImage: ${{ variables.vmImageWindows }}
      Linux:
        poolName: ${{ variables.poolName }}
        vmImage: ${{ variables.vmImageLinux }}
      MacOS:
        poolName: ${{ variables.poolName }}
        vmImage: ${{ variables.vmImageMacOS }}
  pool:
    name: $(poolName)
    vmImage: $(vmImage)
  steps:
  - checkout: none
  - powershell: Write-Host "$(Agent.OS)"
    condition: |
      or(
        succeeded(),
        and(eq(parameters.testWindows, true), eq(variables['Agent.OS'], 'Windows_NT')),
        and(eq(parameters.testLinux, true), eq(variables['Agent.OS'], 'Linux')),
        and(eq(parameters.testMacOS, true), eq(variables['Agent.OS'], 'Darwin'))
      )
  #- ${{ if or( and(eq(parameters.testWindows, true), eq(variables['Agent.OS'], 'Windows_NT')), and(eq(parameters.testLinux, true), eq(variables['Agent.OS'], 'Linux')), and(eq(parameters.testMacOS, true), eq(variables['Agent.OS'], 'Darwin')) ) }}:
  #  - powershell: Write-Host "$(Agent.OS)"