name: $(Date:yyyyMMdd).$(Rev:r)

trigger:
  branches:
    include:
    - develop
    - master
  paths:
    exclude:
    - .azuredevops/**
    - .github/**

variables:
- group: "YAML - Build"
- group: "Build - Chocolatey"
- group: "Build - Nuget"
- group: "GitHub - BapCabrera"

stages: 
- stage: TestAndBuild
  displayName: Test and Build
  jobs:
  - job: TestWindows
    displayName: Test Module
    pool:
      name: $(BuildPoolName)
      vmImage: $(BuildPoolWindowsVm)
    steps:
    - task: CopyFiles@2
      displayName: 'Copy Sources'
      inputs:
        SourceFolder: 'src/$(Build.DefinitionName)'
        Contents: |
          **
          !**\.gitignore
        TargetFolder: '$(BuildSourcesDirectory)'
        CleanTargetFolder: true
        OverWrite: true
    - powershell: |
        Write-Host "Installing dependencies..."
        (Import-PowerShellDataFile .\$(Build.DefinitionName).psd1).RequiredModules | Where-Object { $_ } | ForEach-Object {
          Write-Host " - Installing module '$($_.ModuleName)' with version '$($_.ModuleVersion)'."
          Find-Module -Name $_.ModuleName -RequiredVersion $_.ModuleVersion | Install-Module -Scope CurrentUser -Force
        }

        Write-Host "Creating test results directory..."
        New-Item -Path $(BuildTestDirectory) -ItemType Directory -Force
      workingDirectory: '$(BuildSourcesDirectory)'
      displayName: 'Initialize Tests'
    - task: PowerShell Script Analyzer@1
      displayName: 'Run PowerShell Script Analyzer'
      inputs:
        PsFolder: '$(BuildSourcesDirectory)\Public'
        ExcludeRules: 'PSAvoidGlobalVars'
        Severity: 'Error'
        FailOnError: true
    - task: Pester@10
      displayName: 'Run Pester Tests'
      inputs:
        scriptFolder: '$(BuildSourcesDirectory)\*'
        resultsFile: '$(BuildTestOutputFile)'
        usePSCore: False
    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: '**\*.Tests.xml'
        searchFolder: '$(BuildTestDirectory)'
        mergeTestResults: true
        failTaskOnFailedTests: true
        testRunTitle: 'Pester Tests'
  - job: Build
    displayName: Build Module
    pool:
      name: $(BuildPoolName)
      vmImage: $(BuildPoolWindowsVm)
    dependsOn:
      - TestWindows
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    steps:
    - task: CopyFiles@2
      displayName: 'Copy Sources'
      inputs:
        SourceFolder: 'src/$(Build.DefinitionName)'
        Contents: |
          **
          !**\.gitignore
        TargetFolder: '$(BuildSourcesDirectory)'
        CleanTargetFolder: true
        OverWrite: true
    - powershell: |
        Write-Host "Installing 'Bca.Nuget'..."
        Find-Module -Name Bca.Nuget | Install-Module -Scope CurrentUser -Force
        Write-Host "Installing dependencies..."
        (Import-PowerShellDataFile .\$(Build.DefinitionName).psd1).RequiredModules | Where-Object { $_ } | ForEach-Object {
          Write-Host " - Installing module '$($_.ModuleName)' with version '$($_.ModuleVersion)'."
          Find-Module -Name $_.ModuleName -RequiredVersion $_.ModuleVersion | Install-Module -Scope CurrentUser -Force
        }
      workingDirectory: '$(Build.Repository.LocalPath)\src\$(Build.DefinitionName)'
      displayName: 'Install Bca.Nuget and Dependencies'
    - powershell: |
        Import-Module .\$(Build.DefinitionName).psd1
        $Module = Get-Module $(Build.DefinitionName)
        Update-ModuleManifest -Path .\$(Build.DefinitionName).psd1 `
                -FunctionsToExport $Module.ExportedFunctions.Keys `
                -CmdletsToExport $Module.ExportedCmdlets.Keys `
                -AliasesToExport $ModuleExportedAliases.Keys
        if ($Module.ExportedDscResources)
        {
            Update-ModuleManifest -Path .\$(Build.DefinitionName).psd1 -DscResourcesToExport $Module.ExportedDscResources
        }
        
        Test-ModuleManifest -Path .\$(Build.DefinitionName).psd1 | Format-List *
        Copy-Item -Path .\$(Build.DefinitionName).psd1 -Destination $(BuildSourcesDirectory) -Force
      workingDirectory: '$(Build.Repository.LocalPath)\src\$(Build.DefinitionName)'
      displayName: 'Update Module Manifest'
    - powershell: |
        Import-Module -Name Bca.Nuget -Force
        Write-Host "Creating '$(BuildNuspecFile)'..."
        (Import-PowerShellDataFile .\$(Build.DefinitionName).psd1 | ConvertTo-NuspecManifest).Save("$(BuildNuspecFile)")
      workingDirectory: '$(BuildSourcesDirectory)'
      displayName: 'Create Nuspec Manifest'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranchName'], 'master'))
    - powershell: 'Get-ChildItem -Path $(BuildSourcesDirectory) -Recurse'
      displayName: 'List Artifacts Content'
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Artifact'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranchName'], 'master'))
      inputs:
        targetPath: '$(BuildSourcesDirectory)'
        artifact: '$(BuildArtifacts)'
    - task: gitmirror@0
      displayName: "MIrror Repository to GitHub"
      inputs:
        GitRepoUrl: '$(GitHub.RepoUrl)'
- stage: NuGetPackage
  displayName: NuGet Package
  dependsOn:
    - TestAndBuild
  pool:
    name: $(BuildPoolName)
    vmImage: $(BuildPoolWindowsVm)
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['nugetPack'], true), eq(variables['Build.SourceBranchName'], 'master'))
  jobs:
  - job: NuGetPack
    displayName: Package NuGet
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Pipeline Artifact'
      inputs:
        artifactName: '$(BuildArtifacts)'
        targetPath: '$(NugetPackageDirectory)'
    - task: NuGetCommand@2
      displayName: 'NuGet Pack'
      inputs:
        command: pack
        packagesToPack: '$(NugetPackageManifestFilePath)'
        packDestination: '$(NugetPackageDirectory)'
    - powershell: 'Get-ChildItem -Path $(NugetPackageDirectory) -Recurse'
      displayName: 'List Package Content'
    - task: NuGetCommand@2
      displayName: 'Push NuGet Package'
      inputs:
        command: push
        packagesToPush: '$(NugetPackageFilePath)'
        publishVstsFeed: '$(NugetFeedName)'
      condition: and(succeeded(), or(eq(variables['nugetPush'], true), eq(variables['Build.Reason'], 'IndividualCI')))
      env:
        SYSTEM_ACCESSTOKEN: $(system.accesstoken)

- stage: ChocoPackage
  displayName: Chocolatey Package
  dependsOn:
    - TestAndBuild
  pool:
    name: $(BuildPoolName)
    vmImage: $(BuildPoolWindowsVm)
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['chocoPack'], true), eq(variables['Build.SourceBranchName'], 'master'))
  jobs:
  - job: ChocoPack
    displayName: Package Chocolatey
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Pipeline Artifact'
      inputs:
        artifactName: '$(BuildArtifacts)'
        targetPath: '$(ChocoPackageSourceTargetDirectory)'
    - powershell: 'Move-Item -Path (Join-Path $(ChocoPackageSourceTargetDirectory) $(Build.DefinitionName).nuspec) -Destination $(ChocoPackageDirectory)'
      displayName: 'Move Nuspec Manifest'
    - task: GitDownloader@0
      displayName: "Get Build Tools"
      inputs:
        RepositoryUrl: '$(BuildToolsGitUri)'
        BranchTag: 'master'
    - task: CopyFiles@2
      displayName: 'Copy Chocolatey Scripts'
      inputs:
        SourceFolder: '$(Build.GitDirectory)\build-tools\Packaging\PSModules\Chocolatey'
        Contents: 'chocolatey*nstall.ps1'
        TargetFolder: '$(ChocoPackageToolsDirectory)'
        OverWrite: true
    - task: ChocolateyCommand@0
      displayName: "Chocloatey Pack"
      inputs:
        command: 'pack'
        packOperation: 'single'
        packWorkingDirectory: '$(ChocoPackageDirectory)'
        packNuspecFileName: '$(Build.DefinitionName).nuspec'
        packOutputDirectory: '$(ChocoPackageDirectory)'
    - powershell: 'Get-ChildItem -Path $(ChocoPackageDirectory) -Recurse'
      displayName: 'List Package Content'
    - task: NuGetCommand@2
      displayName: 'Push Chocolatey Package'
      inputs:
        command: push
        packagesToPush: '$(ChocoPackageFilePath)'
        publishVstsFeed: '$(ChocoFeedName)'
      condition: and(succeeded(), or(eq(variables['chocoPush'], true), eq(variables['Build.Reason'], 'IndividualCI')))
      env:
        SYSTEM_ACCESSTOKEN: $(system.accesstoken)