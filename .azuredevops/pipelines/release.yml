name: Release-$(Date:yyyyMMdd).$(Rev:r)

trigger:
- none

variables:
- group: "YAML - Release"
- group: "YAML - Release - Chocolatey"
- group: "YAML - Release - Nuget"
- group: "Release - PS Gallery"

resources:
  pipelines:
  - pipeline: Build
    source: Build\Bca.Test
    trigger: 
      branches:
      - master

stages:
- stage: Choco
  displayName: Chocolatey
  pool:
    name: $(ReleasePoolName)
    vmImage: $(ReleasePoolWindowsVm)
  condition: eq(variables['chocoSkip'], false)
  jobs:
  - deployment: ChocoPreRelease
    displayName: PreRelease Deployment
    environment: PreRelease
    strategy:
      runOnce:
        deploy:
          steps:
          - powershell: |
              $Module = Import-PowerShellDataFile $(ReleaseModuleManifest)
              Write-Host $Module.ModuleVersion
              Write-Host "##vso[task.setvariable variable=chocoPackageVersion]$($Module.ModuleVersion.ToString())"
            displayName: 'Set Package Version'
          - task: ChocolateyCommand@0
            inputs:
              command: 'source'
              verbose: true
              sourceOperation: 'add'
              sourceSourceName: '$(ChocoFeedName)'
              sourceSource: '$(ChocoFeedUrl)'
              user: '$(ChocoFeedUserName)'
              password: '$(ChocoFeedPassword)'
            env:
              SYSTEM_ACCESSTOKEN: $(system.accesstoken)
          - task: ChocolateyCommand@0
            inputs:
              command: 'install'
              verbose: true
              installPackageId: '$(resources.pipeline.Build.pipelineName)'
              installPackageVersion: '$(chocoPackageVersion)'
              installPre: true
              installSource: '$(ChocoFeedName)'
            env:
              SYSTEM_ACCESSTOKEN: $(system.accesstoken)
          - powershell: |
              Import-Module $(resources.pipeline.Build.pipelineName) -Verbose
              $Module = Get-Module $(resources.pipeline.Build.pipelineName)
              $Module | Format-List *
              Write-Host "##vso[task.setvariable variable=ModulePath]$($Module.ModuleBase)"
              
              Get-ChildItem -Path $Module.ModuleBase -Recurse
            displayName: 'Test Module'
          - task: Pester@10
            inputs:
              scriptFolder: '"$(ModulePath)\*"'
              resultsFile: '$(ChocoTestOutputFile)'
              usePSCore: False
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            inputs:
              testResultsFormat: NUnit
              testResultsFiles: 'Choco_$(resources.pipeline.Build.pipelineName).Tests.xml'
              searchFolder: '$(System.ArtifactsDirectory)'
              mergeTestResults: true
              failTaskOnFailedTests: true
              testRunTitle: 'Chocolatey Pester Tests'
          - task: rvo-vsts-promotepackage-task@3
            inputs:
              feed: '$(ChocoFeedName)'
              inputType: 'nameVersion'
              definition: '$(resources.pipeline.Build.pipelineName)'
              version: '$(chocoPackageVersion)'
              releaseView: 'Prerelease'
            env:
              SYSTEM_ACCESSTOKEN: $(system.accesstoken)
  - deployment: ChocoRelease
    displayName: Release Deployment
    environment: Release
    dependsOn:
      - ChocoPreRelease
    condition: eq(variables['chocoPublish'], true)
    strategy:
      runOnce:
        deploy:
          steps:
          - powershell: |
              $Module = Import-PowerShellDataFile $(ReleaseModuleManifest)
              Write-Host $Module.ModuleVersion
              Write-Host "##vso[task.setvariable variable=chocoPackageVersion]$($Module.ModuleVersion.ToString())"
            displayName: 'Set Package Version'
          - task: DownloadPackage@1
            displayName: Download Package
            inputs:
              packageType: 'nuget'
              feed: '/$(ChocoFeedName)'
              definition: '$(resources.pipeline.Build.pipelineName)'
              version: '$(chocoPackageVersion)'
              extract: false
              downloadPath: '$(ChocoWorkingPath)'
          - task: ChocolateyCommand@0
            inputs:
              command: 'push'
              pushOperation: 'single'
              pushWorkingDirectory: '$(ChocoWorkingPath)'
              pushNupkgFileName: '$(resources.pipeline.Build.pipelineName).nupkg'
              chocolateySourceType: 'manual'
              pushSource: '$(ChocoOrgFeedUrl)'
              pushApikey: '$(ChocoOrgApiKey)'
          - task: rvo-vsts-promotepackage-task@3
            inputs:
              feed: '$(ChocoFeedName)'
              inputType: 'nameVersion'
              definition: '$(resources.pipeline.Build.pipelineName)'
              version: '$(chocoPackageVersion)'
              releaseView: 'Release'
            env:
              SYSTEM_ACCESSTOKEN: $(system.accesstoken)

- stage: NuGet
  displayName: NuGet
  condition: eq(variables['nugetSkip'], false)
  jobs:
  - deployment: NuGetPreReleaseWindows
    displayName: PreRelease Deployment on Windows
    environment: PreRelease
    pool:
      name: $(ReleasePoolName)
      vmImage: $(ReleasePoolWindowsVm)
    strategy:
      runOnce:
        deploy:
          steps:
          - powershell: |
              $Module = Import-PowerShellDataFile $(ReleaseModuleManifest)
              Write-Host $Module.ModuleVersion
              Write-Host "##vso[task.setvariable variable=nugetPackageVersion]$($Module.ModuleVersion.ToString())"
              Write-Host "##vso[task.setvariable variable=PackageVersion;isOutput=true]$($Module.ModuleVersion.ToString())"
            displayName: 'Set Package Version'
          - powershell: |
              $SecurePassword = ConvertTo-SecureString "$(NugetFeedPassword)" -AsPlainText -Force
              $Credential = New-Object System.Management.Automation.PSCredential ("$(NugetFeedUserName)", $SecurePassword)
              
              Register-PackageSource -ProviderName PowerShellGet -Name $(NugetFeedName) -Location $(NugetFeedUrl) -Trusted -Credential $Credential
              Find-Module -Name $(resources.pipeline.Build.pipelineName) -RequiredVersion $(nugetPackageVersion) -Credential $Credential | Install-Module -Credential $Credential
            displayName: 'Install Module'
          - powershell: |
              Import-Module $(resources.pipeline.Build.pipelineName) -Verbose
              $Module = Get-Module $(resources.pipeline.Build.pipelineName)
              $Module | Format-List *
              Write-Host "##vso[task.setvariable variable=ModulePath]$($Module.ModuleBase)"
              
              Get-ChildItem -Path $Module.ModuleBase -Recurse
            displayName: 'Test Module'

  - job: NuGetPromote
    displayName: Promote Package
    pool:
      name: $(ReleasePoolName)
      vmImage: $(ReleasePoolWindowsVm)
    dependsOn:
      - NuGetPreReleaseWindows
    steps:
    - powershell: |
        $Module = Import-PowerShellDataFile $(ReleaseModuleManifest)
        Write-Host $Module.ModuleVersion
        Write-Host "##vso[task.setvariable variable=nugetPackageVersion]$($Module.ModuleVersion.ToString())"
      displayName: 'Set Package Version'
    - task: rvo-vsts-promotepackage-task@3
      inputs:
        feed: '$(NugetFeedName)'
        inputType: 'nameVersion'
        definition: '$(resources.pipeline.Build.pipelineName)'
        version: '$(nugetPackageVersion)'
        releaseView: 'Prerelease'
      env:
        SYSTEM_ACCESSTOKEN: $(system.accesstoken)

  - deployment: NuGetRelease
    displayName: Release Deployment
    pool:
      name: $(ReleasePoolName)
      vmImage: $(ReleasePoolWindowsVm)
    environment: Release
    dependsOn:
      - NuGetPromote
    condition: eq(variables['nugetPublish'], true)
    strategy:
      runOnce:
        deploy:
          steps:
          - powershell: |
              $Module = Import-PowerShellDataFile $(ReleaseModuleManifest)
              Write-Host $Module.ModuleVersion
              Write-Host "##vso[task.setvariable variable=nugetPackageVersion]$($Module.ModuleVersion.ToString())"
            displayName: 'Set Package Version'
          - task: NuGetCommand@2
            displayName: 'Push Package to NuGet.Org'
            inputs:
              command: push
              packagesToPush: '$(NugetNupkgPath)'
              nuGetFeedType: external
              publishFeedCredentials: Nuget.org
          - task: rvo-vsts-promotepackage-task@3
            inputs:
              feed: '$(NugetFeedName)'
              inputType: 'nameVersion'
              definition: '$(resources.pipeline.Build.pipelineName)'
              version: '$(nugetPackageVersion)'
              releaseView: 'Release'
            env:
              SYSTEM_ACCESSTOKEN: $(system.accesstoken)

- stage: PSGallery
  displayName: PowerShell Gallery
  condition: eq(variables['psGalSkip'], false)
  jobs:
  - deployment: PSGalleryPreReleaseWindows
    displayName: PreRelease Deployment on Windows
    environment: PreRelease
    pool:
      name: $(ReleasePoolName)
      vmImage: $(ReleasePoolWindowsVm)
    strategy:
      runOnce:
        deploy:
          steps:
          - powershell: |
              $Module = Import-PowerShellDataFile $(ReleaseModuleManifest)
              Write-Host $Module.ModuleVersion
              Write-Host "##vso[task.setvariable variable=nugetPackageVersion]$($Module.ModuleVersion.ToString())"
            displayName: 'Set Package Version'
          - powershell: |
              $SecurePassword = ConvertTo-SecureString "$(NugetFeedPassword)" -AsPlainText -Force
              $Credential = New-Object System.Management.Automation.PSCredential ("$(NugetFeedUserName)", $SecurePassword)
              
              Register-PackageSource -ProviderName PowerShellGet -Name bca -Location $(NugetFeedUrl) -Trusted -Credential $Credential
              Find-Module -Name $(resources.pipeline.Build.pipelineName) -RequiredVersion $(nugetPackageVersion) -Credential $Credential | Install-Module -Credential $Credential
            displayName: 'Install Module'
          - powershell: |
              Import-Module $(resources.pipeline.Build.pipelineName) -Verbose
              $Module = Get-Module $(resources.pipeline.Build.pipelineName)
              $Module | Format-List *
              Write-Host "##vso[task.setvariable variable=ModulePath]$($Module.ModuleBase)"
              
              Get-ChildItem -Path $Module.ModuleBase -Recurse
            displayName: 'Test Module'
  - deployment: PSGalleryRelease
    displayName: Release Deployment
    pool:
      name: $(ReleasePoolName)
      vmImage: $(ReleasePoolWindowsVm)
    environment: Release
    dependsOn:
      - PSGalleryPreReleaseWindows
    condition: eq(variables['psGalPublish'], true)
    strategy:
      runOnce:
        deploy:
          steps:
          - powershell: |
              $Module = Import-PowerShellDataFile $(ReleaseModuleManifest)
              Write-Host $Module.ModuleVersion
              Write-Host "##vso[task.setvariable variable=nugetPackageVersion]$($Module.ModuleVersion.ToString())"
            displayName: 'Set Package Version'
          - powershell: |
              $SecurePassword = ConvertTo-SecureString "$(NugetFeedPassword)" -AsPlainText -Force
              $Credential = New-Object System.Management.Automation.PSCredential ("$(NugetFeedUserName)", $SecurePassword)
              
              Register-PackageSource -ProviderName PowerShellGet -Name bca -Location $(NugetFeedUrl) -Trusted -Credential $Credential
              Find-Module -Name $(resources.pipeline.Build.pipelineName) -RequiredVersion $(nugetPackageVersion) -Credential $Credential | Install-Module -Credential $Credential
            displayName: 'Install Module'
          - powershell: 'Publish-Module -Name $(resources.pipeline.Build.pipelineName) -NuGetApiKey  ''$(PSGalleryApiKey)'''
            displayName: 'Publish Module to PowerShell Gallery'





#          - powershell: |
#              Write-Host 'Build.DefinitionName: $(resources.pipeline.Build.pipelineName)'
#              Write-Host 'buildName: $(buildName)'
#              Write-Host 'relName: $(relName)'
#              Write-Host 'projectID: $(resources.pipeline.Build.projectID)'
#              Write-Host 'pipelineName: $(resources.pipeline.Build.pipelineName)'
#              Write-Host 'pipelineID: $(resources.pipeline.Build.pipelineID)'
#              Write-Host 'runName: $(resources.pipeline.Build.runName)'
#              Write-Host 'runID: $(resources.pipeline.Build.runID)'
#              Write-Host 'runURI: $(resources.pipeline.Build.runURI)'
#              Write-Host 'sourceBranch: $(resources.pipeline.Build.sourceBranch)'
#              Write-Host 'sourceCommit: $(resources.pipeline.Build.sourceCommit)'
#              Write-Host ':sourceProvider $(resources.pipeline.Build.sourceProvider)'
#              Write-Host 'requestedFor: $(resources.pipeline.Build.requestedFor)'
#              Write-Host 'requestedForID: $(resources.pipeline.Build.requestedForID)'
#            displayName: 'Test'
#          - powershell: |
#              Get-ChildItem '$(PIPELINE.WORKSPACE)/Build/$(resources.pipeline.Build.pipelineName)-$(resources.pipeline.Build.runName)' -Recurse
#            displayName: 'List'
#projectID: a4de323a-3d00-4d2a-8047-116570878445
#pipelineName: Bca.Test
#pipelineID: 13
#runName: 20200719.3
#runID: 172
#runURI: vstfs:///Build/Build/172
#sourceBranch: refs/heads/test
#sourceCommit: 3da9e8462493c0a040ae07ffe1bf8e338ff077c6
#:sourceProvider TfsGit
#requestedFor: Baptiste Cabrera
#requestedForID: 4190257d-f165-46c2-b76d-2889266a3786

